/* nejsme vcerejsi, pouzivame moderni box model */
html { box-sizing: border-box; }
*, :after, :before { box-sizing: inherit; }


body {
	margin: 0;
	padding: 30px;
	font-family:  'Alice', serif;
	font-size: 18px;
	line-height: 1.5;
}

h1, h2, h3 {
	font-family: 'Kaushan Script', cursive;
	font-weight: normal;
	margin: 0;
}

blockquote {
	font-family: 'Kaushan Script', cursive;
}

/* --------------------------------------------------- */

/* barvy */
:root {
	--svetla: #edf3f5;
	--seda: #b2bec3;
	--tmava: #636e72;
	--oranzova: #ee5a24;
	--cervena: #ea2027;
	--zluta: #f79f1f;
	--zelena: #a3cb38;
	--limetka: #c4e538;
}

/*
	Všimni si, jak jsou zde nadefinované barvy.
	Potřebný kód barvy si odtamtud můžeš vyzobnout a použít
	ve svém kódu, ale existuje i lepší způsob.

  CSS custom properties, někdy také označované jako CSS
	variables (CSS proměnné), je způsob, jak si	pojmenovat
	nějakou hodnotu a potom ji v kódu opakovaně používat.
	Často se používá právě pro barvy a další "nastavení".

	Když si chci nějakou hodnotu nadefinovat, použiji zápis
	--mujnazev: hodnota
	Když chci, abych mohl hodnotu používat všude v CSS,
	založím ji uvnitř selektoru :root, takže např.:
	:root {
		--mojebarva: #ff8800;
	}

	Chci-li potom dál v CSS hodnotu použít, stačí použít funkci var a v závorce název proměnné.Např.:
	.odstavec {
		color: var(--mojebarva);
	}

	Nemusím si tak pamatovat kódy barev nebo neustále v CSS jezdit nahoru a dolů, abych si je odněkud zkopíroval.

	Více o CSS custom properties:
	- https://www.w3schools.com/css/css3_variables.asp
	- https://css-tricks.com/patterns-for-practical-css-custom-properties-use/
	- https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/
*/

body{
	padding: 15px;
}
.blog{
	margin: 0 auto;
}
h1,
h2 {
	color: var(--zelena);
}
h1{
	font-size: 40px;
	margin-bottom: 20px;
}
h2{
	font-size: 30px;
}
.meta,
figcaption{
	color: var(--seda);
}

blockquote {
	margin: 20px;
	text-align: center;
	font-size: 22px;
	color: var(--seda);
}
	blockquote::after,
	blockquote::before{
		content: "";
		display: block;
		width: 150px;
		height: 3px;
		background: var(--zelena);
		margin: 10px auto;
	}

footer p,
footer a {
	color: var(--seda);
}

/*IMG*/
figure {
	margin: 30px 0 40px 0;
}
figure img,
.tip-vlevo img {
	width: 100%;
	display: block;
}
/* figure img{
	height: 100%;
	object-fit: cover;
} */

/*TIP*/
.tip {
	background-color: var(--svetla);
	color: var(--tmava);
	padding: 15px;
	font-size: 15px;
	border-left: 3px solid var(--oranzova);
}
	.tip p{
		margin: 0;
	}
	.tip a {
		color: var(--oranzova);
	}

@media screen and  (min-width: 770px){
	body{
		padding: 20px;
	}
	.blog {
		display: grid;
		grid-template-columns: 5fr 2fr;
		grid-auto-rows: auto;
		column-gap: 30px;
		align-items: start;
	}
		header,
		h2,
		p,
		footer{
			grid-column: 1;
		}
		figure,
		blockquote {
			grid-column: 1 / span 2;
		}

	h1{
		font-size: 50px;
	}
	h2{
		font-size: 40px;
	}
	p{
	margin-top: 0;
	}
	blockquote {
		margin: 20px 0 40px 0;
		font-size: 28px;
	}
	blockquote::after,
	blockquote::before{
		margin: 15px auto;
	}
	.tip-vlevo img{
		width: 100%;
		height: 100px;
		object-fit: cover;
	}
}

@media screen and (min-width: 1100px) {
	body{
		padding: 30px;
	}
	.blog {
		max-width: 1040px;
		display: grid;
		grid-template-columns: 1fr 4fr 2fr;
		grid-auto-rows: auto;
		column-gap: 40px;
		align-items: start;
	}
		header,
		h2,
		p,
		footer{
			grid-column: 2;
		}
		figure,
		blockquote {
			grid-column: 1 / span 3;
		}
			.tip-vlevo{
			grid-column: 1;
		}
		.tip-vpravo {
			grid-column: 3;
		}

	h1{
		font-size: 60px;
		margin-bottom: 30px;
	}
	h2{
		font-size: 45px;
	}
	blockquote {
		font-size: 33px;
	}
	.tip-vlevo {
		text-align: right;
		border-right: 3px solid var(--oranzova);
		border-left: none;
	}
	.tip-vpravo {
		border-left: 3px solid var(--oranzova);
	}
}